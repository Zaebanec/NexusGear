--- FILE: src/presentation/handlers/common.py ---
from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

common_router = Router()

def get_main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    builder.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
    builder.adjust(2) # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    return builder.as_markup(resize_keyboard=True)

@common_router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NEXUS Gear, {message.from_user.full_name}!",
        reply_markup=get_main_menu_keyboard(),
    )
--- FILE: src/presentation/handlers/catalog.py ---

from decimal import Decimal
from aiogram import Dispatcher, F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import Scope

from src.application.services.catalog import CategoryService, ProductService

class CategoryCallbackFactory(CallbackData, prefix="category"):
    id: int
    name: str

class AddProductCallbackFactory(CallbackData, prefix="add_product"):
    id: int
    name: str
    price: Decimal

catalog_router = Router()

@catalog_router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(message: Message, dispatcher: Dispatcher):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    """
    container = dispatcher["dishka_container"]
    async with container(scope=Scope.REQUEST) as request_container:
        category_service = await request_container.get(CategoryService)

        categories = await category_service.get_all()
        if not categories:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(
                text=category.name,
                callback_data=CategoryCallbackFactory(id=category.id, name=category.name),
            )
        builder.adjust(2)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup()
        )


@catalog_router.callback_query(CategoryCallbackFactory.filter())
async def show_products(
    query: CallbackQuery,
    callback_data: CategoryCallbackFactory,
    dispatcher: Dispatcher,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    container = dispatcher["dishka_container"]
    async with container(scope=Scope.REQUEST) as request_container:
        product_service = await request_container.get(ProductService)

        products = await product_service.get_by_category(callback_data.id)
        if not products:
            await query.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            await query.answer()
            return

        await query.answer(f"–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã –∏–∑ '{callback_data.name}'...")
        for product in products:
            card = (
                f"<b>{product.name}</b>\n"
                f"<i>–¶–µ–Ω–∞: {product.price} —Ä—É–±.</i>\n\n"
                f"{product.description}"
            )
            builder = InlineKeyboardBuilder()
            builder.button(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=AddProductCallbackFactory(
                    id=product.id, name=product.name, price=product.price
                ),
            )
            await query.message.answer(card, reply_markup=builder.as_markup())
--- FILE: src/presentation/handlers/cart.py ---
import logging # <-- 1. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from decimal import Decimal
from aiogram import Dispatcher, F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import Scope

from src.application.contracts.cart.cart_repository import ICartRepository
from src.application.services.order_service import OrderService
from src.domain.entities.cart_item import CartItem

from .catalog import AddProductCallbackFactory

cart_router = Router()

class CreateOrderCallbackFactory(CallbackData, prefix="create_order"):
    pass


@cart_router.callback_query(AddProductCallbackFactory.filter())
async def add_product_to_cart(
    query: CallbackQuery,
    callback_data: AddProductCallbackFactory,
    dispatcher: Dispatcher,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    container = dispatcher["dishka_container"]
    # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π –Ω–µ –Ω—É–∂–µ–Ω REQUEST —Å–∫–æ—É–ø, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–∏–Ω–≥–ª—Ç–æ–Ω (APP)
    cart_repo = await container.get(ICartRepository)
    
    item_to_add = CartItem(
        product_id=callback_data.id,
        name=callback_data.name,
        price=callback_data.price,
        quantity=1,
    )
    await cart_repo.add_item(user_id=query.from_user.id, item=item_to_add)

    await query.answer(
        f'–¢–æ–≤–∞—Ä "{callback_data.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!',
        show_alert=True
    )

@cart_router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message, dispatcher: Dispatcher):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã."""
    container = dispatcher["dishka_container"]
    cart_repo = await container.get(ICartRepository)
    
    items = await cart_repo.get_by_user_id(user_id=message.from_user.id)

    if not items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    cart_text = "<b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total_amount = Decimal("0")
    for i, item in enumerate(items, 1):
        item_total = item.price * item.quantity
        cart_text += (
            f"{i}. {item.name}\n"
            f"   {item.quantity} —à—Ç. x {item.price} —Ä—É–±. = {item_total} —Ä—É–±.\n"
        )
        total_amount += item_total
    
    cart_text += f"\n<b>–ò—Ç–æ–≥–æ: {total_amount} —Ä—É–±.</b>"
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data=CreateOrderCallbackFactory(),
    )
    await message.answer(cart_text, reply_markup=builder.as_markup())
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

# --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
@cart_router.callback_query(CreateOrderCallbackFactory.filter())
async def create_order(query: CallbackQuery, dispatcher: Dispatcher):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    container = dispatcher["dishka_container"]
    async with container(scope=Scope.REQUEST) as request_container:
        order_service = await request_container.get(OrderService)
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é —Å–ª–æ–∂–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
            order = await order_service.create_order_from_cart(user_id=query.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await query.message.answer(
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã."
            )
            await query.answer("–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!")

        except ValueError as e:
            # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—É—Å—Ç–∞
            await query.answer(str(e), show_alert=True)
        except Exception as e:
            # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)
            # –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
--- FILE: src/presentation/bot.py ---
import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from dishka import make_async_container

# --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from src.infrastructure.logging.setup import setup_logging
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

from src.infrastructure.config import settings
from src.infrastructure.di.providers import (
    ConfigProvider,
    DbProvider,
    MemoryProvider,
    RepoProvider,
    ServiceProvider,
)
from src.presentation.handlers.catalog import catalog_router
from src.presentation.handlers.common import common_router
from src.presentation.web.app import setup_app


async def main():
    # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –°–ê–ú–û–ô –ü–ï–†–í–û–ô —Å—Ç—Ä–æ–∫–æ–π
    # —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º.
    setup_logging()
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---

    container = make_async_container(
        ConfigProvider(),
        DbProvider(),
        MemoryProvider(),
        RepoProvider(),
        ServiceProvider()
    )

    bot = Bot(
        token=settings.bot.token.get_secret_value(),
        default=DefaultBotProperties(parse_mode="HTML")
    )

    dp = Dispatcher(dishka_container=container)
    
    dp.include_router(common_router)
    dp.include_router(catalog_router)

    app = setup_app(dishka_container=container)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)

    try:
        logging.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ Telegram-–±–æ—Ç–∞...")
        await site.start()
        await dp.start_polling(bot)
    finally:
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        await runner.cleanup()
        await container.close()
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")