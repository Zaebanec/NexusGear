[tool.poetry]
name = "nexus-gear"
version = "0.1.0"
description = "Telegram Bot on Clean Architecture"
authors = ["AI Orchestrator <orchestrator@ai-nexus.dev>"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
aiohttp = "^3.9.3"
aiogram = "^3.21.0"
sqlalchemy = {extras = ["asyncpg"], version = "^2.0.41"}
alembic = "^1.13.1"
pydantic-settings = "^2.2.1"
dishka = "^1.1.0"
asyncpg = "^0.30.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.6"
pytest-mock = "^3.12.0"
black = "^25.1.0"
ruff = "^0.12.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = [
  "."
]
[tool.black]
line-length = 88
# Наша целевая версия Python - 3.11
target-version = ['py311']

[tool.ruff]
# Указываем ту же длину строки, что и у Black.
line-length = 88
# Указываем целевую версию Python
target-version = "py311"

[tool.ruff.lint]
# E - pycodestyle errors
# W - pycodestyle warnings
# F - Pyflakes
# I - isort (сортировка импортов)
# C90 - McCabe complexity (предотвращает слишком сложные функции)
select = ["E", "W", "F", "I", "C90"]

# Игнорируем некоторые правила, если они мешают
# ignore = []

[tool.ruff.lint.isort]
# Помогает Ruff правильно сортировать импорты для нашего проекта
# Указываем src как наш основной исходный код
known-first-party = ["src"]