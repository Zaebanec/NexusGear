# src/presentation/handlers/cart.py - –≠–¢–ê–õ–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import logging
import traceback
from decimal import Decimal
from aiogram import Dispatcher, F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import Scope

from src.application.contracts.cart.cart_repository import ICartRepository
from src.application.contracts.persistence.uow import IUnitOfWork # <-- –ò–ú–ü–û–†–¢
from src.application.interfaces.repositories.user_repository import IUserRepository
from src.application.services.order_service import OrderService
from src.domain.entities.cart_item import CartItem

from .catalog import AddProductCallbackFactory

cart_router = Router()

class CreateOrderCallbackFactory(CallbackData, prefix="create_order"):
    pass

@cart_router.callback_query(AddProductCallbackFactory.filter())
async def add_product_to_cart(
    query: CallbackQuery,
    callback_data: AddProductCallbackFactory,
    dispatcher: Dispatcher,
):
    container = dispatcher["dishka_container"]
    cart_repo = await container.get(ICartRepository)

    item_to_add = CartItem(
        product_id=callback_data.id, name=callback_data.name,
        price=callback_data.price, quantity=1,
    )
    await cart_repo.add_item(user_id=query.from_user.id, item=item_to_add)
    await query.answer(f'–¢–æ–≤–∞—Ä "{callback_data.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', show_alert=True)

@cart_router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message, dispatcher: Dispatcher):
    container = dispatcher["dishka_container"]
    cart_repo = await container.get(ICartRepository)

    items = await cart_repo.get_by_user_id(user_id=message.from_user.id)
    if not items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    cart_text = "<b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total_amount = Decimal("0")
    for i, item in enumerate(items, 1):
        item_total = item.price * item.quantity
        cart_text += f"{i}. {item.name}\n   {item.quantity} —à—Ç. x {item.price} —Ä—É–±. = {item_total} —Ä—É–±.\n"
        total_amount += item_total
    cart_text += f"\n<b>–ò—Ç–æ–≥–æ: {total_amount} —Ä—É–±.</b>"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=CreateOrderCallbackFactory())
    await message.answer(cart_text, reply_markup=builder.as_markup())

@cart_router.callback_query(CreateOrderCallbackFactory.filter())
async def create_order(
    query: CallbackQuery,
    callback_data: CreateOrderCallbackFactory,
    dispatcher: Dispatcher,
):
    telegram_id = query.from_user.id
    container = dispatcher["dishka_container"]

    async with container(scope=Scope.REQUEST) as request_container:
        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –Ø–í–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ï–ô ---
        uow = await request_container.get(IUnitOfWork)
        user_repo = await request_container.get(IUserRepository)
        order_service = await request_container.get(OrderService)

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ó–î–ï–°–¨, –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            async with uow.atomic():
                user = await user_repo.get_by_telegram_id(telegram_id)
                if not user:
                    # –≠—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑–æ–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π rollback –≤ uow.atomic()
                    raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

                # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ù–ê–®–ï–ô —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                order = await order_service.create_order_from_cart(
                    internal_user_id=user.id,
                    telegram_id=telegram_id
                )
            
            # –ï—Å–ª–∏ –º—ã –≤—ã—à–ª–∏ –∏–∑ –±–ª–æ–∫–∞ –±–µ–∑ –æ—à–∏–±–æ–∫, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞
            await query.message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.")
            await query.answer("–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!")

        except ValueError as e:
            # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à–µ –±–∏–∑–Ω–µ—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            logging.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            await query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", show_alert=True)
        except Exception as e:
            traceback.print_exc()
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)