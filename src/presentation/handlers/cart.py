# src/presentation/handlers/cart.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° TWA

import json
import logging
import traceback
from decimal import Decimal

from aiogram import F, Router
from aiogram.types import (  # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WebAppInfo
    CallbackQuery,
    Message,
    PreCheckoutQuery,  # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
    WebAppInfo,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import AsyncContainer, Scope

from src.application.contracts.cart.cart_repository import ICartRepository
from src.application.contracts.persistence.uow import IUnitOfWork
from src.application.services.order_service import OrderService
from src.domain.entities.cart_item import CartItem
from src.infrastructure.config import settings  # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è URL

from .catalog import AddProductCallbackFactory

cart_router = Router()

# –≠—Ç–æ—Ç CallbackData –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –µ–≥–æ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º
# class CreateOrderCallbackFactory(CallbackData, prefix="create_order"):
#     pass

@cart_router.pre_checkout_query()
async def pre_checkout_query_handler(query: PreCheckoutQuery):
    """
    –ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂.
    –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö TWA-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.
    """
    await query.answer(ok=True)

@cart_router.callback_query(AddProductCallbackFactory.filter())
async def add_product_to_cart(
    query: CallbackQuery,
    callback_data: AddProductCallbackFactory,
    dishka_container: AsyncContainer,
):
    async with dishka_container(scope=Scope.REQUEST) as request_container:
        cart_repo = await request_container.get(ICartRepository)
        item_to_add = CartItem(
            product_id=callback_data.id, name=callback_data.name,
            price=callback_data.price, quantity=1,
        )
        await cart_repo.add_item(user_id=query.from_user.id, item=item_to_add)
    
    await query.answer(f'–¢–æ–≤–∞—Ä "{callback_data.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', show_alert=True)

@cart_router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message, dishka_container: AsyncContainer):
    async with dishka_container(scope=Scope.REQUEST) as request_container:
        cart_repo = await request_container.get(ICartRepository)
        items = await cart_repo.get_by_user_id(user_id=message.from_user.id)

    if not items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    cart_text = "<b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total_amount = Decimal("0")
    for i, item in enumerate(items, 1):
        item_total = item.price * item.quantity
        cart_text += f"{i}. {item.name}\n   {item.quantity} —à—Ç. x {item.price} —Ä—É–±. = {item_total} —Ä—É–±.\n"
        total_amount += item_total
    
    cart_text += f"\n<b>–ò—Ç–æ–≥–æ: {total_amount} —Ä—É–±.</b>"
    
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ö–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç WebApp ---
    builder = InlineKeyboardBuilder()
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –Ω–∞—à–µ–≥–æ TWA
    web_app_url = f"{settings.app.base_url}/order"
    builder.button(
        text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", 
        web_app=WebAppInfo(url=web_app_url)
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    
    await message.answer(cart_text, reply_markup=builder.as_markup())

# --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ TWA ---
# –û–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ TWA
@cart_router.message(F.web_app_data)
async def web_app_data_received(message: Message, dishka_container: AsyncContainer):
    telegram_id = message.from_user.id

    # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≤–∏–¥–µ JSON-—Å—Ç—Ä–æ–∫–∏
    data = json.loads(message.web_app_data.data)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Pydantic)

    # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω—ã:\n"
        f"<b>–§–ò–û:</b> {data.get('full_name')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone')}\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {data.get('address')}\n\n"
        f"–°–æ–∑–¥–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑..."
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ
    async with dishka_container(scope=Scope.REQUEST) as request_container:
        uow = await request_container.get(IUnitOfWork)
        order_service = await request_container.get(OrderService)

        try:
            async with uow.atomic():
                order = await order_service.create_order(telegram_id=telegram_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± —É—Å–ø–µ—Ö–µ
            await message.answer(
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {data.get('address')}.\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä {data.get('phone')} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )

        except ValueError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è user {telegram_id}: {e}")
            await message.answer(str(e))
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è user {telegram_id}: {e}")
            traceback.print_exc()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

# –°—Ç–∞—Ä—ã–π —Ö–µ–Ω–¥–ª–µ—Ä create_order —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
