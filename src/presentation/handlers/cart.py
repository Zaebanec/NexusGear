# src/presentation/handlers/cart.py - –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import logging
import traceback
from decimal import Decimal

from aiogram import Dispatcher, F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import AsyncContainer, Scope

from src.application.contracts.cart.cart_repository import ICartRepository
from src.application.contracts.persistence.uow import IUnitOfWork
from src.application.services.order_service import OrderService
from src.domain.entities.cart_item import CartItem

from .catalog import AddProductCallbackFactory

cart_router = Router()

class CreateOrderCallbackFactory(CallbackData, prefix="create_order"):
    pass

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏–≤–µ–¥–µ–Ω –∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥—É ---
@cart_router.callback_query(AddProductCallbackFactory.filter())
async def add_product_to_cart(
    query: CallbackQuery,
    callback_data: AddProductCallbackFactory,
    dishka_container: AsyncContainer,
):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    async with dishka_container(scope=Scope.REQUEST) as request_container:
        cart_repo = await request_container.get(ICartRepository)

        item_to_add = CartItem(
            product_id=callback_data.id, name=callback_data.name,
            price=callback_data.price, quantity=1,
        )
        await cart_repo.add_item(user_id=query.from_user.id, item=item_to_add)
    
    await query.answer(f'–¢–æ–≤–∞—Ä "{callback_data.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', show_alert=True)

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏–≤–µ–¥–µ–Ω –∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥—É ---
@cart_router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message, dishka_container: AsyncContainer):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    async with dishka_container(scope=Scope.REQUEST) as request_container:
        cart_repo = await request_container.get(ICartRepository)
        items = await cart_repo.get_by_user_id(user_id=message.from_user.id)

    if not items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    cart_text = "<b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total_amount = Decimal("0")
    for i, item in enumerate(items, 1):
        item_total = item.price * item.quantity
        cart_text += f"{i}. {item.name}\n   {item.quantity} —à—Ç. x {item.price} —Ä—É–±. = {item_total} —Ä—É–±.\n"
        total_amount += item_total
    
    cart_text += f"\n<b>–ò—Ç–æ–≥–æ: {total_amount} —Ä—É–±.</b>"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=CreateOrderCallbackFactory())
    await message.answer(cart_text, reply_markup=builder.as_markup())

@cart_router.callback_query(CreateOrderCallbackFactory.filter())
async def create_order(
    query: CallbackQuery,
    callback_data: CreateOrderCallbackFactory,
    dishka_container: AsyncContainer,
):
    telegram_id = query.from_user.id

    async with dishka_container(scope=Scope.REQUEST) as request_container:
        uow = await request_container.get(IUnitOfWork)
        order_service = await request_container.get(OrderService)

        try:
            async with uow.atomic():
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú—ã –ø–µ—Ä–µ–¥–∞–µ–º telegram_id, –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å ---
                order = await order_service.create_order(telegram_id=telegram_id)
            
            await query.message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.")
            await query.answer("–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!")

        except ValueError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è user {telegram_id}: {e}")
            await query.answer(str(e), show_alert=True)
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è user {telegram_id}: {e}")
            traceback.print_exc()
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.", show_alert=True)