# src/presentation/handlers/ai_consultant.py - –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, WebAppInfo # <-- 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WebAppInfo
from dishka import AsyncContainer, Scope
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ChatAction

from src.application.services.ai_consultant import AIConsultantService
from src.application.services.catalog import ProductService
# from src.presentation.handlers.catalog import AddProductCallbackFactory <-- 2. –£–î–ê–õ–Ø–ï–ú –ù–ï–ù–£–ñ–ù–´–ô –ò–ú–ü–û–†–¢
from src.infrastructure.config import settings # <-- 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è URL

ai_router = Router()

class AIConsultation(StatesGroup):
    waiting_for_query = State()

@ai_router.message(F.text == "ü§ñ AI-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
async def start_consultation(message: Message, state: FSMContext):
    await message.answer(
        "–Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫! ü§ñ\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–ª—è –∫–∞–∫–∏—Ö –∑–∞–¥–∞—á –≤–∞–º –Ω—É–∂–µ–Ω —Ç–æ–≤–∞—Ä, –∏ —è –ø–æ–¥–±–µ—Ä—É "
        "–ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>'–Ø –∏—â—É –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π, –≤–∞–∂–µ–Ω —Ö–æ—Ä–æ—à–∏–π —ç–∫—Ä–∞–Ω –∏ –º–æ—â–Ω–æ—Å—Ç—å.'</i>"
    )
    await state.set_state(AIConsultation.waiting_for_query)

@ai_router.message(AIConsultation.waiting_for_query)
async def process_query(message: Message, state: FSMContext, dishka_container: AsyncContainer):
    await message.chat.do(ChatAction.TYPING)
    
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º.")
        return
    async with dishka_container(scope=Scope.REQUEST) as request_container:
        ai_service = await request_container.get(AIConsultantService)
        product_service = await request_container.get(ProductService)
        
        recommendation = await ai_service.get_recommendation(message.text)
        
        product_id = recommendation.get("product_id")
        explanation = str(recommendation.get("explanation") or "")

        if product_id:
            product = await product_service.get_by_id(product_id)
            if product:
                card = (
                    f"<b>{product.name}</b>\n"
                    f"<i>–¶–µ–Ω–∞: {product.price} —Ä—É–±.</i>\n\n"
                    f"{product.description}"
                )
                
                # --- 4. –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É –≤ Web App ---
                builder = InlineKeyboardBuilder()
                # –§–æ—Ä–º–∏—Ä—É–µ–º "–≥–ª—É–±–æ–∫—É—é —Å—Å—ã–ª–∫—É" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∞
                web_app_url = f"{settings.app.base_url}/products/{product.id}"
                builder.button(
                    text="üõí –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
                    web_app=WebAppInfo(url=web_app_url)
                )
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

                await message.answer(card, reply_markup=builder.as_markup())
                await message.answer(f"<b>ü§ñ –ú–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n\n{explanation}")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        else:
            await message.answer(explanation)

    await state.clear()