from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka.integrations.aiogram import FromDishka

from src.application.services.catalog import CategoryService, ProductService

# --- –§–∞–±—Ä–∏–∫–∞ –¥–ª—è Callback'–æ–≤ –ö–∞—Ç–µ–≥–æ—Ä–∏–π ---
class CategoryCallbackFactory(CallbackData, prefix="category"):
    id: int
    name: str # –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

# --- –†–æ—É—Ç–µ—Ä –¥–ª—è –ö–∞—Ç–∞–ª–æ–≥–∞ ---
catalog_router = Router()


@catalog_router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(
    message: Message, category_service: FromDishka[CategoryService]
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    """
    categories = await category_service.get_all()
    if not categories:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(
            text=category.name,
            callback_data=CategoryCallbackFactory(id=category.id, name=category.name),
        )
    builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup()
    )


@catalog_router.callback_query(CategoryCallbackFactory.filter())
async def show_products(
    query: CallbackQuery,
    callback_data: CategoryCallbackFactory,
    product_service: FromDishka[ProductService],
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    await query.answer(f"–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã –∏–∑ '{callback_data.name}'...")

    products = await product_service.get_by_category(callback_data.id)

    if not products:
        await query.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    for product in products:
        card = (
            f"<b>{product.name}</b>\n"
            f"<i>–¶–µ–Ω–∞: {product.price} —Ä—É–±.</i>\n\n"
            f"{product.description}"
        )
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"
        await query.message.answer(card, parse_mode="HTML")