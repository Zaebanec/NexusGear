# src/presentation/handlers/catalog.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

from decimal import Decimal

from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import AsyncContainer, Scope  # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AsyncContainer

from src.application.services.catalog import CategoryService, ProductService


class CategoryCallbackFactory(CallbackData, prefix="category"):
    id: int
    name: str

class AddProductCallbackFactory(CallbackData, prefix="add_product"):
    id: int
    name: str
    price: Decimal

catalog_router = Router()

@catalog_router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(message: Message, dishka_container: AsyncContainer): # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    """
    async with dishka_container(scope=Scope.REQUEST) as request_container: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï
        category_service = await request_container.get(CategoryService)

        categories = await category_service.get_all()
        if not categories:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return

        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.button(
                text=category.name,
                callback_data=CategoryCallbackFactory(id=category.id, name=category.name),
            )
        builder.adjust(2)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup()
        )


@catalog_router.callback_query(CategoryCallbackFactory.filter())
async def show_products(
    query: CallbackQuery,
    callback_data: CategoryCallbackFactory,
    dishka_container: AsyncContainer, # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    async with dishka_container(scope=Scope.REQUEST) as request_container: # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï
        product_service = await request_container.get(ProductService)

        products = await product_service.get_by_category(callback_data.id)
        if not products:
            await query.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            await query.answer()
            return

        await query.answer(f"–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã –∏–∑ '{callback_data.name}'...")
        for product in products:
            card = (
                f"<b>{product.name}</b>\n"
                f"<i>–¶–µ–Ω–∞: {product.price} —Ä—É–±.</i>\n\n"
                f"{product.description}"
            )
            builder = InlineKeyboardBuilder()
            builder.button(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=AddProductCallbackFactory(
                    id=product.id, name=product.name, price=product.price
                ),
            )
            await query.message.answer(card, reply_markup=builder.as_markup())